{
  "author": {
    "name": "Felix Geisend√∂rfer",
    "email": "felix@debuggable.com",
    "url": "http://debuggable.com/"
  },
  "name": "buffy",
  "description": "A module to read / write binary data and streams.",
  "version": "0.0.2",
  "homepage": "https://github.com/felixge/node-buffy",
  "repository": {
    "type": "git",
    "url": "git://github.com/felixge/node-buffy.git"
  },
  "main": "./index",
  "scripts": {
    "test": "make test"
  },
  "dependencies": {},
  "optionalDependencies": {},
  "devDependencies": {
    "utest": "0.0.6",
    "urun": "0.0.6"
  },
  "engines": {
    "node": "*"
  },
  "readme": "# buffy (The Buffer Slayer)\n\nA module to read / write binary data and streams.\n\n## Install\n\n<strong>THIS MODULE IS STILL A WORK IN PROGRESS, DO NOT USE!</strong>\n\n## Usage\n\nLet's say you want to parse a simple C struct, buffy can help:\n\n```js\nvar buffy = require('buffy');\n\nvar buffer = new Buffer([23, 0, 0, 0, 15, 116, 101, 115, 116]);\nvar reader = buffy.createReader(buffer);\n\nvar record = {\n  version : reader.uint8(),\n  id      : reader.uint32(),\n  name    : reader.ascii(4),\n};\n\n// {version: 23, id: 15, name: 'test'}\n```\n\nParsing a buffer is nice, but what about streams? Well, buffy has your back:\n\n```js\nvar buffy      = require('buffy');\nvar net        = require('net');\nvar connection = net.createConnection(1337, 'example.org');\n\nvar reader = buffy.createReader();\nconnection.pipe(reader);\n\nvar struct = [\n  ['version' , 'uint8'],\n  ['id'      , 'uint32'],\n  ['name'    , 'ascii', 4],\n];\n\nreader.on('data', function() {\n  var record = reader.read(struct);\n  if (!record) {\n    return;\n  }\n});\n\n```\n\n## API\n\n### reader.write(buffer)\n\nAppends the given `buffer` to the internal buffer.\n\n### reader.bytesAhead()\n\nReturns the number of unread bytes available to the reader.\n\n### reader.int8() / reader.uint8()\n\nReturns the next (un)signed 8 bit integer.\n\n### reader.int16BE() / reader.uint16BE() / reader.int16LE() / reader.uint16LE()\n\nReturns the next (un)signed 16 bit integer in the chosen endianness.\n\n### reader.int32BE() / reader.uint32BE() / reader.int32LE() / reader.uint32LE()\n\nReturns the next (un)signed 32 bit integer in the chosen endianness.\n\n### reader.float32BE() / reader.float32LE()\n\nReturns the next 32 bit float in the chosen endianness.\n\n### reader.double64BE() / reader.double64LE()\n\nReturns the next 64 bit double in the chosen endianness.\n\n### reader.ascii([bytes]) / reader.utf8([bytes])\n\nReturns the next `bytes` as a string of the chosen encoding. If `bytes` is\nomitted, a null terminated string is assumed.\n\n### reader.buffer([bytes])\n\nReturns the next `bytes` as a buffer.\n\n## Error Handling\n\nThe reader will throw an exception whenever an operation exceeds the boundary\nof the internal buffer.\n",
  "_id": "buffy@0.0.2",
  "dist": {
    "shasum": "7d1fea2a9314f65694e8e2b297e035726030f56a"
  },
  "_from": "buffy@0.0.2"
}
